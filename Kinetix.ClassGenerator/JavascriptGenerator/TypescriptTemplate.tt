<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/*
    Ce fichier a été généré automatiquement.
    Toute modification sera perdue.
*/

import {<#= FocusImport #>} from "focus4/entity";
import {<#= string.Join(", ", GetDomainList()) #>} from "../../domains";
<# var imports = GetImportList();
   foreach (var import in imports) { 
#>

import {<#= import.import #>} from "<#= import.path #>";<# 
} if (imports.Any()) { #>

<# } #>

export interface <#= Model.Name #><# if (Model.ParentClass != null) { #> extends <#= Model.ParentClass.Name #><# } #> {
<# foreach (var property in Model.PropertyList) { #>
    <#= Utils.ToFirstLower(property.Name) #><#= property.DataMember.IsRequired && !property.IsPrimaryKey || property.DataType != "int?" && property.IsPrimaryKey || IsArray(property) || property.IsFromComposition ? string.Empty : "?" #>: <#= ToTSType(property) #>;
<# } #>
}

export interface <#= Model.Name #>Node extends <# if (Model.ParentClass == null) { #>StoreNode<<#= Model.Name #>><# } else { #><#= Model.ParentClass.Name #>Node<# } #> {
<# foreach (var property in Model.PropertyList) { #>
    <#= Utils.ToFirstLower(property.Name) #>: <# 
        if (IsArray(property)) { 
            #>StoreListNode<<# 
        } else if (!property.IsFromComposition) {
            #>EntityField<<# 
        } #><#= ToTSType(property, true) #><#= GetReferencedType(property) != null ? "Node" : string.Empty #><#
        if (GetDomain(property) != null) { 
                #>, typeof <#= GetDomain(property) #><# }
        #><# 
        if (IsArray(property) || !property.IsFromComposition) { 
            #>><# 
        } #>;
<# } #><#
    if (Model.ParentClass != null) {
    #>    set(config: Partial<<#= Model.Name #>>): void;
<# }
#>
}

export const <#= Model.Name #>Entity = {
    name: "<#= Utils.ToFirstLower(Model.Name) #>",
    fields: {
<# if (Model.ParentClass != null) { #>
        ...<#= Model.ParentClass.Name #>Entity.fields,
<# } #>
<# foreach (var property in Model.PropertyList) { #>
        <#= Utils.ToFirstLower(property.Name) #>: {
            <# if (!IsArray(property) && !property.IsFromComposition) { #>name: "<#= Utils.ToFirstLower(property.Name) #>",
            <# } #>type: <# if (IsArray(property)) { #>"list" as "list"<# } else if (property.IsFromComposition) { #>"object" as "object"<# } else { #>"field" as "field"<# } #>,
            <# if (GetDomain(property) != null) { 
                 #>domain: <#= GetDomain(property) #>,
            <# } else {
                 #>entityName: "<#= Utils.ToFirstLower(GetReferencedType(property)) #>"<# 
                 if (!IsArray(property) && !property.IsFromComposition) { #>,
            <#    } else { #>

        <#        }
               } if (!IsArray(property) && !property.IsFromComposition) { 
                 #>isRequired: <#= Utils.ToFirstLower((property.DataMember.IsRequired && (!property.IsPrimaryKey || property.DataType != "int?")).ToString()) #>,
            <# } #><# if (!IsArray(property) && !property.IsFromComposition) { 
                 #>label: "<#= Utils.ToNamespace(Model.Namespace.Name) #>.<#= Utils.ToFirstLower(Model.Name) #>.<#= Utils.ToFirstLower(property.Name) #>"
        <# } #>}<# if (property != Model.PropertyList.Last()) { #>,<# }
#>

<#
} #>
    }
};
<# if (Model.IsReference) { #> 
export const <#= Utils.ToFirstLower(Model.Name) #> = {type: {} as <#= Model.Name #>, valueKey: "<#= Utils.ToFirstLower(Model.PrimaryKey.First().Name) #>", labelKey: "<#= Utils.ToFirstLower(Model.DefaultProperty ?? "Libelle") #>"}; 
<# } #>